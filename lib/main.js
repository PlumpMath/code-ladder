// Generated by CoffeeScript 1.6.2
var test_code;

test_code = "# https://github.com/qiao/coffee-box/blob/master/app/controllers/posts_controller.coffee\nexports.getPostsController = (app) ->\n  exceptions              = require '../../lib/exceptions'\n  RSS                     = require('rss')\n  {Post}                  = app.settings.models\n  {postPath}              = app.settings.helpers\n  {markdown, makeTagList} = app.settings.utils\n\n  return {\n\n    # GET /posts\n    index: (req, res, next) ->\n      # check pagination param: /posts/?page=2\n      pageNo = parseInt(req.query['page'], 10) or 1\n\n      POSTS_PER_PAGE = 5\n      Post.countPostPages POSTS_PER_PAGE, (err, totalPages) ->\n        Post.getPostsOfPage pageNo, POSTS_PER_PAGE, (err, posts) ->\n          return res.redirect '500' if err?\n          res.render 'posts/index'\n            posts:      posts\n            pageNo:     pageNo\n            totalPages: totalPages\n\n    # GET /year/month/day/:slug.:format?\n    show: (req, res, next) ->\n      Post.findBySlug req.params.slug, (err, post) ->\n        return res.redirect '500' if err?\n        return res.redirect '404' unless post?\n        res.render 'posts/show'\n          post: post\n\n    # GET /posts/new\n    new: (req, res, next) ->\n      res.render 'posts/new'\n        post: new Post\n\n    # GET /year/month/day/:slug/edit\n    edit: (req, res, next) ->\n      Post.findBySlug req.params.slug, (err, post) ->\n        return res.redirect '500' if err?\n        return res.redirect '404' unless post?\n        res.render 'posts/edit'\n          post: post\n\n    # POST /posts\n    create: (req, res, next) ->\n      post         = new Post\n      post.data    = req.body.post\n      post.save (err) ->\n        if err\n          req.flash 'error', exceptions.getMessage err\n          res.redirect 'back'\n        else\n          req.flash 'info', 'successfully posted'\n          res.redirect postPath(post)\n\n    # PUT /year/month/day/:slug\n    update: (req, res, next) ->\n      Post.findBySlug req.params.slug, (err, post) ->\n        return res.redirect '500' if err?\n        return res.redirect '404' unless post?\n        post.data = req.body.post\n        post.save (err) ->\n          if err\n            req.flash 'error', exceptions.getMessage err\n            res.redirect 'back'\n          else\n            req.flash 'info', 'successfully updated'\n            res.redirect postPath(post)\n\n    # DELETE /year/month/day/:slug\n    destroy: (req, res, next) ->\n      Post.removeBySlug req.params.slug, (err) ->\n        res.redirect 'back'\n\n    # find all posts published as individual pages\n    # this is a middleware to apply before all requests\n    findPages: (req, res, next) ->\n      Post.findPages (err, pages) ->\n        res.locals pages: pages\n        next()\n\n    # GET /:slug\n    showPage: (req, res, next) ->\n      Post.findBySlug req.params.slug, (err, post) ->\n        return res.redirect '500' if err?\n        return next() unless post?\n        res.render 'posts/show'\n          post: post\n\n    # GET /feed\n    feed: (req, res, next) ->\n      Post.findPosts (err, posts) ->\n        feed = new RSS\n          title:       app.settings.sitename\n          description: app.settings.description\n          feed_url:    app.settings.url + '/feed'\n          author:      app.settings.author\n\n        for post in posts\n          feed.item\n            title:       post.title\n            description: post.content\n            url:         app.settings.url + postPath(post)\n            date:        post.createdAt\n\n        res.send feed.xml()\n\n    # POST /posts/preview\n    preview: (req, res, next) ->\n      markdown req.body.rawContent or '', (html) ->\n        res.send html, 200\n\n  }";

window.onload = function() {
  var dom, render;

  dom = require("./dom").rain;
  render = require("./render");
  dom.on("paste", function(value) {
    return dom.emit("render", render.convert(value));
  });
  return dom.emit("render", render.convert(test_code));
};
