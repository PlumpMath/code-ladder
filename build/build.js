;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
var test_code;

test_code = "# https://github.com/qiao/coffee-box/blob/master/app/controllers/posts_controller.coffee\nexports.getPostsController = (app) ->\n  exceptions              = require '../../lib/exceptions'\n  RSS                     = require('rss')\n  {Post}                  = app.settings.models\n  {postPath}              = app.settings.helpers\n  {markdown, makeTagList} = app.settings.utils\n\n  return {\n\n    # GET /posts\n    index: (req, res, next) ->\n      # check pagination param: /posts/?page=2\n      pageNo = parseInt(req.query['page'], 10) or 1\n\n      POSTS_PER_PAGE = 5\n      Post.countPostPages POSTS_PER_PAGE, (err, totalPages) ->\n        Post.getPostsOfPage pageNo, POSTS_PER_PAGE, (err, posts) ->\n          return res.redirect '500' if err?\n          res.render 'posts/index'\n            posts:      posts\n            pageNo:     pageNo\n            totalPages: totalPages\n\n    # GET /year/month/day/:slug.:format?\n    show: (req, res, next) ->\n      Post.findBySlug req.params.slug, (err, post) ->\n        return res.redirect '500' if err?\n        return res.redirect '404' unless post?\n        res.render 'posts/show'\n          post: post\n\n    # GET /posts/new\n    new: (req, res, next) ->\n      res.render 'posts/new'\n        post: new Post\n\n    # GET /year/month/day/:slug/edit\n    edit: (req, res, next) ->\n      Post.findBySlug req.params.slug, (err, post) ->\n        return res.redirect '500' if err?\n        return res.redirect '404' unless post?\n        res.render 'posts/edit'\n          post: post\n\n    # POST /posts\n    create: (req, res, next) ->\n      post         = new Post\n      post.data    = req.body.post\n      post.save (err) ->\n        if err\n          req.flash 'error', exceptions.getMessage err\n          res.redirect 'back'\n        else\n          req.flash 'info', 'successfully posted'\n          res.redirect postPath(post)\n\n    # PUT /year/month/day/:slug\n    update: (req, res, next) ->\n      Post.findBySlug req.params.slug, (err, post) ->\n        return res.redirect '500' if err?\n        return res.redirect '404' unless post?\n        post.data = req.body.post\n        post.save (err) ->\n          if err\n            req.flash 'error', exceptions.getMessage err\n            res.redirect 'back'\n          else\n            req.flash 'info', 'successfully updated'\n            res.redirect postPath(post)\n\n    # DELETE /year/month/day/:slug\n    destroy: (req, res, next) ->\n      Post.removeBySlug req.params.slug, (err) ->\n        res.redirect 'back'\n\n    # find all posts published as individual pages\n    # this is a middleware to apply before all requests\n    findPages: (req, res, next) ->\n      Post.findPages (err, pages) ->\n        res.locals pages: pages\n        next()\n\n    # GET /:slug\n    showPage: (req, res, next) ->\n      Post.findBySlug req.params.slug, (err, post) ->\n        return res.redirect '500' if err?\n        return next() unless post?\n        res.render 'posts/show'\n          post: post\n\n    # GET /feed\n    feed: (req, res, next) ->\n      Post.findPosts (err, posts) ->\n        feed = new RSS\n          title:       app.settings.sitename\n          description: app.settings.description\n          feed_url:    app.settings.url + '/feed'\n          author:      app.settings.author\n\n        for post in posts\n          feed.item\n            title:       post.title\n            description: post.content\n            url:         app.settings.url + postPath(post)\n            date:        post.createdAt\n\n        res.send feed.xml()\n\n    # POST /posts/preview\n    preview: (req, res, next) ->\n      markdown req.body.rawContent or '', (html) ->\n        res.send html, 200\n\n  }";

window.onload = function() {
  var dom, render;

  dom = require("./dom").rain;
  render = require("./render");
  dom.on("paste", function(value) {
    return dom.emit("render", render.convert(value));
  });
  return dom.emit("render", render.convert(test_code));
};

},{"./dom":2,"./render":3}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
var detect, escapeHTML, get_indent, make_html, make_list, make_tree;

detect = require("./detect");

get_indent = function(line) {
  var match;

  match = line.match(/^(\s*)/);
  return match[0].length;
};

escapeHTML = function(string) {
  return string.replace(/</g, "&lt;").replace(/>/g, "&gt;");
};

make_list = function(code) {
  return code.split("\n").map(function(line) {
    return line.trimRight();
  }).filter(function(line) {
    return line.length > 0;
  }).map(escapeHTML);
};

make_tree = function(lines) {
  var last, tree;

  tree = {};
  last = void 0;
  lines.forEach(function(line) {
    var indent, n;

    n = get_indent(line);
    indent = void 0;
    if (n === 0) {
      if (Array.isArray(tree[last])) {
        tree[last] = make_tree(tree[last]);
      }
      last = line;
      tree[last] = [];
      return indent = void 0;
    } else {
      if (indent == null) {
        indent = n;
      }
      return tree[last].push(line.slice(2));
    }
  });
  if (Array.isArray(tree[last])) {
    tree[last] = make_tree(tree[last]);
  }
  return tree;
};

make_html = function(tree) {
  var add, html, key, value;

  html = "";
  add = function(string) {
    return html += string;
  };
  for (key in tree) {
    value = tree[key];
    add("<div class='unit'>");
    add("<div class='line'>");
    add(key);
    add("</div>");
    add("<div class='block'>");
    add(make_html(value));
    add("</div>");
    add("</div>");
  }
  return html;
};

exports.convert = function(code) {
  return make_html(make_tree(make_list(code)));
};

},{"./detect":4}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
var use_space;

use_space = function(line) {
  return line.replace(/\t/g, "  ");
};

exports.indent = function(code) {
  var gather_indent, indent, lines;

  code = code.trim();
  indent = 80;
  gather_indent = function(line) {
    var after, before, diff;

    before = line.length;
    after = line.trimLeft().length;
    diff = before - after;
    if ((0 < diff && diff < indent)) {
      return indent = diff;
    }
  };
  lines = code.split("\n").map(String.prototype.trimRight.call).map(use_space).map(gather_indent);
  return indent;
};

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
var EventEmitter, all, delay, paper, paste, q, rain;

q = function(query) {
  return document.querySelector(query);
};

all = function(query) {
  return document.querySelectorAll(query);
};

EventEmitter = require("eventemitter").EventEmitter;

delay = function(t, f) {
  return setTimeout(f, t);
};

exports.rain = rain = new EventEmitter();

paste = q("#paste");

paper = q("#paper");

paper.onclick = function(event) {
  var elem, next, style;

  elem = event.target;
  if (elem.className === "line") {
    next = elem.nextElementSibling;
    style = next.style;
    if (style.opacity === "0") {
      elem.style.background = "hsla(240,80%,90%,0)";
      return style.opacity = "1";
    } else if (next.childElementCount > 0) {
      elem.style.background = "hsl(240,80%,93%)";
      return style.opacity = "0";
    }
  }
};

q("#fold").onclick = function() {
  return Array.prototype.map.call(all(".block"), function(elem) {
    elem.style.opacity = "1";
    return elem.previousElementSibling.click();
  });
};

q("#expand").onclick = function() {
  return Array.prototype.map.call(all(".block"), function(elem) {
    elem.style.opacity = "0";
    return elem.previousElementSibling.click();
  });
};

paste.addEventListener("paste", function() {
  return delay(0, function() {
    return rain.emit("paste", paste.value);
  });
});

rain.on("render", function(html) {
  paper.innerHTML = html;
  return Array.prototype.map.call(all(".block"), function(elem) {
    return elem.style.opacity = "1";
  });
});

},{"eventemitter":5}],5:[function(require,module,exports){
(function(){(function(exports) {
  var process = { EventEmitter: function() {} };
  
  if (typeof Array.isArray !== "function"){
    Array.isArray = function(obj){ return Object.prototype.toString.call(obj) === "[object Array]" };
  }
  
  if (!Array.prototype.indexOf){
    Array.prototype.indexOf = function(item){
        for ( var i = 0, length = this.length; i < length; i++ ) {
            if ( this[ i ] === item ) {
                return i;
            }
        }

        return -1;
    };
  }
  
  // Begin wrap of nodejs implementation of EventEmitter

  var EventEmitter = exports.EventEmitter = process.EventEmitter;

  var isArray = Array.isArray;

  EventEmitter.prototype.emit = function(type) {
    // If there is no 'error' event listener then throw.
    if (type === 'error') {
      if (!this._events || !this._events.error ||
          (isArray(this._events.error) && !this._events.error.length))
      {
        if (arguments[1] instanceof Error) {
          throw arguments[1]; // Unhandled 'error' event
        } else {
          throw new Error("Uncaught, unspecified 'error' event.");
        }
        return false;
      }
    }

    if (!this._events) return false;
    var handler = this._events[type];
    if (!handler) return false;

    if (typeof handler == 'function') {
      switch (arguments.length) {
        // fast cases
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        // slower
        default:
          var args = Array.prototype.slice.call(arguments, 1);
          handler.apply(this, args);
      }
      return true;

    } else if (isArray(handler)) {
      var args = Array.prototype.slice.call(arguments, 1);

      var listeners = handler.slice();
      for (var i = 0, l = listeners.length; i < l; i++) {
        listeners[i].apply(this, args);
      }
      return true;

    } else {
      return false;
    }
  };

  // EventEmitter is defined in src/node_events.cc
  // EventEmitter.prototype.emit() is also defined there.
  EventEmitter.prototype.addListener = function(type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('addListener only takes instances of Function');
    }

    if (!this._events) this._events = {};

    // To avoid recursion in the case that type == "newListeners"! Before
    // adding it to the listeners, first emit "newListeners".
    this.emit('newListener', type, listener);

    if (!this._events[type]) {
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    } else if (isArray(this._events[type])) {
      // If we've already got an array, just append.
      this._events[type].push(listener);
    } else {
      // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];
    }

    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function(type, listener) {
    var self = this;
    self.on(type, function g() {
      self.removeListener(type, g);
      listener.apply(this, arguments);
    });
  };

  EventEmitter.prototype.removeListener = function(type, listener) {
    if ('function' !== typeof listener) {
      throw new Error('removeListener only takes instances of Function');
    }

    // does not use listeners(), so no side effect of creating _events[type]
    if (!this._events || !this._events[type]) return this;

    var list = this._events[type];

    if (isArray(list)) {
      var i = list.indexOf(listener);
      if (i < 0) return this;
      list.splice(i, 1);
      if (list.length == 0)
        delete this._events[type];
    } else if (this._events[type] === listener) {
      delete this._events[type];
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function(type) {
    // does not use listeners(), so no side effect of creating _events[type]
    if (type && this._events && this._events[type]) this._events[type] = null;
    return this;
  };

  EventEmitter.prototype.listeners = function(type) {
    if (!this._events) this._events = {};
    if (!this._events[type]) this._events[type] = [];
    if (!isArray(this._events[type])) {
      this._events[type] = [this._events[type]];
    }
    return this._events[type];
  };

  // End nodejs implementation
}((typeof exports === 'undefined') ? window : exports));
})()
},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
;